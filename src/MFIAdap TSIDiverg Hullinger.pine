/// ╔═══════════════════════════════╗
/// ║  AI Adaptive Money Flow Index	║
/// ╔═══════════════════════════════╗
/// ║  Tsi & Divergences			║
/// ╔═══════════════════════════════╗
/// ║	Hullinger Percentile Osc	║
/// ║	@	Allen.					║
/// ║	©	AlgoAlpha				║
/// ╚═══════════════════════════════╝

//@version=5
indicator("MFI Adaptive & TSI Diverg & Hullinger [Allen]", "MFI & TSI & Hull", overlay = false, format = format.price, precision = 4, explicit_plot_zorder = true)

//// ───────────────────────
/// ─── Colors ──────
//// ───────────────────────

/// ─── Standard ──
	// color.aqua								= #00BCD4
	// color.blue								= #2196F3
	// color.teal								= #00897B
	// color.green								= #4CAF50
	// color.olive								= #808000
	// color.lime								= #00E676
	// color.yellow								= #FFEB3B
	// color.orange								= #FF9800
	// color.maroon								= #880E4F
	// color.red								= #FF5252
	// color.fuchsia							= #E040FB
	// color.purple								= #9C27B0
	// color.navy								= #311B92
	// color.black								= #363A45
	// color.gray								= #787B86
	// color.silver								= #B2B5BE
	// color.white								= #FFFFFF

/// ─── Ameritrade ───
	// AmeTrWhite								= #FFFFFF								// AmeritradeWhite
	// AmeTrGrayPlatinum						= #F7F7F7								// AmeritradeGrayPlatinum
AmeTrGrayNickel							= #F1F1F1								// AmeritradeGrayNickel
	// AmeTrGrayNickelDark20					= #C0C0C0								// AmeritradeGrayNickelDark20
	// AmeTrGrayAluminum						= #E6E7E9								// AmeritradeGrayAluminum
	// AmeTrGrayAsh								= #D8D8D8								// AmeritradeGrayAsh
	// AmeTrGrayStone							= #999999								// AmeritradeGrayStone
	// AmeTrGrayIron							= #666666								// AmeritradeGrayIron
	// AmeTrGrayCharcoal						= #333333								// AmeritradeGrayCharcoal
	// AmeTrBlack								= #000000								// AmeritradeBlack
	// AmeTrGreenCabbage						= #EBF6E9								// AmeritradeGreenCabbage
	// AmeTrGreenLight70						= #B4D6B2								// AmeritradeGreenLight70
	// AmeTrGreenLight50						= #83BC7F								// AmeritradeGreenLight50
	// AmeTrGreenNat							= #40a829								// AmeritradeGreenNat
	// AmeTrGreenLight20						= #399333								// AmeritradeGreenLight20
	// AmeTrGreen								= #087900								// AmeritradeGreen
	// AmeTrGreenDark20							= #066000								// AmeritradeGreenDark20
	// AmeTrGreenMoss							= #BEE7D3								// AmeritradeGreenMoss
	// AmeTrGreenMint							= #6DC4BC								// AmeritradeGreenMint
	// AmeTrGreenPine							= #38635A								// AmeritradeGreenPine
	// AmeTrRedRose								= #FAD1CF								// AmeritradeRedRose
	// AmeTrRedLight50							= #E08988								// AmeritradeRedLight50
	// AmeTrRedLight20							= #CD4241								// AmeritradeRedLight20
	// AmeTrRed									= #C11312								// AmeritradeRed
	// AmeTrRedDark20							= #940F0E								// AmeritradeRedDark20
	// AmeTrOrangePeach							= #FCE7CA								// AmeritradeOrangePeach
	// AmeTrOrangeCarrot						= #ED8902								// AmeritradeOrangeCarrot
	// AmeTrOOrangeYam							= #BD5310								// AmeritradeOOrangeYam
	// AmeTrBlueFrost							= #E1EEF9								// AmeritradeBlueFrost
	// AmeTrBlueLagoon							= #316486								// AmeritradeBlueLagoon
	// AmeTrBlueNavy							= #2A5673								// AmeritradeBlueNavy
	// AmeTrBlueNcean							= #64A1C6								// AmeritradeBlueNcean
	// AmeTrPurpleEggPlant						= #732181								// AmeritradePurpleEggPlant

/// ─── Axi ───
	// AxiPrimary								= #fc404d								// AxiPrimary				/// ► ◄ ▲ ▼
	// AxiSecondary								= #282424								// AxiSecondary				/// ↑ ↓ → ←
	// AxiAccent								= #61ce70								// AxiAccent
	// Axi7a46f22								= #d11c36								// Axi7a46f22				/// @|1↓→9|1→5|.-|_789_|	/// coint|1↓→6|1→6|.-|_47_|
	// Axi1519066c								= #fc404d								// Axi1519066c				/// @|1↓→6|1↓→6|!|_7_|		/// coint|1↓→9|1→4|.!|_4_|
	// Axi3d4fa1a1								= #f0ebe3								// Axi3d4fa1a1				/// @|1↓→9|1↓→9|!|_7_|		/// coint|1↓→9|1→6|.-|_1_|		/// ok|1↓→6|1→5|.-|_147_|		/// |1↓→9|1→4|.!|_4_|
	// Axi638b46c1								= #fcd758								// Axi638b46c1				/// @|1→↑12|.-|_147_|
	// Axid07bac9								= #f9b4a8								// Axid07bac9				/// @|1→↑12|.-|_741_|
	// Axie63a114								= #2c4d5a								// Axie63a114				/// @|1→↑12|.-|_852_|		/// gt|1→↑10|.-|_52_|			/// zoo|1→↑10|.-|_82_|			/// |1→↑11|.-|_82_|
	// Axi8bf0845								= #a4d866								// Axi8bf0845				/// @|1→↑12|.-|_852_|		/// thinkors|1→↑9|_8_|2|		/// book|1→↑9|_8_|2|			/// disc|1→↑10|.-|_63_|
	// Axi75c6da1								= #282424								// Axi75c6da1				/// @|1→↑12|.-|_963_|		/// lbx|1→↑11|.-|852|
	// Axi378280f								= #45c2c7								// Axi378280f				/// @|1↓→9|1→6|.|_4_|		/// ok|1↓→6|1→4|.!|_789_|
	// Axi4de92c5								= #6caddf								// Axi4de92c5				/// @|1→↑13|.-!|_963_|		/// exch|1→↑10|.-|_85_|
	// Axi413dab8			   					= #00275d								// Axi413dab8											/// hotm|1→↑10|.-|_7_|			/// ins|1→↑10|.-|_95_|
	// Axib3fab89								= #55165c								// Axib3fab89
	// Axi548138f								= #45c2c7								// Axi548138f				/// ► ◄ ▲ ▼
	// Axi5ed9920								= #ea1616								// Axi5ed9920				/// ↑ ↓ → ←
	// Axi70f7335								= #dd0606								// Axi70f7335

/// ─── GrayScale ───
	// GraySFocus								= #2d7aed								// GrayScaleFocus
	// GraySWhite								= #fff									// GrayScaleWhite
	// GraySBlack								= #000									// GrayScaleBlack
	// GraySPrimaryBlackberry					= #2e234b								// GrayScalePrimaryBlackberry
	// GraySPrimaryBlackberry40					= rgba(46, 35, 75, .4))					// GrayScalePrimaryBlackberry40
	// GraySPrimaryBlackberry65					= rgba(46, 35, 75, .65))				// GrayScalePrimaryBlackberry65
	// GraySPrimaryCoral						= #ffb198								// GrayScalePrimaryCoral
	// GraySSecondaryForestGreen				= #244024								// GrayScaleSecondaryForestGreen
	// GraySSecondaryKeyLime					= #b5ce6f								// GrayScaleSecondaryKeyLime
	// GraySSecondaryLavender					= #c5bfe4								// GrayScaleSecondaryLavender
	// GraySSecondaryLavender40					= rgba(197, 191, 228, .4))				// GrayScaleSecondaryLavender40
	// GraySsecondaryLavender60					= rgba(197, 191, 228, .6))				// GrayScalesecondaryLavender60
	// GrayShoverWhite							= #c0bdc9								// GrayScalehoverWhite
	// GrayShoverBlackberry						= #42326b								// GrayScalehoverBlackberry
	// GraySdisabledBlackberry					= #4d4466								// GrayScaledisabledBlackberry
	// GraySactiveBlackberry					= #4d4466								// GrayScaleactiveBlackberry
	// GrayShoverCcoral							= #ffcdbd								// GrayScalehoverCcoral
	// GraySactiveCcoral						= #ff9e80								// GrayScaleactiveCcoral
	// GrayShoverGray							= #827b93								// GrayScalehoverGray
	// GrayShoverGray2							= #6d6581								// GrayScalehoverGray2
	// GraySgrayCharcoal						= #282525								// GrayScalegrayCharcoal
	// GraySgrayCharcoal70						= rgba(40, 37, 37, .7))					// GrayScalegrayCharcoal70
	// GraySgrayCharcoal80						= rgba(40, 37, 37, .8))					// GrayScalegrayCharcoal80
	// GraySgrayLight							= #f5f5f5								// GrayScalegrayLight
	// GraySgrayMedium							= #eee									// GrayScalegrayMedium
	// GraySgray70								= #696666								// GrayScalegray70
	// GraySgrayDark							= #c1c1c1								// GrayScalegrayDark
	// GraySwebSeasalt		    				= #fafafc								// GrayScalewebSeasalt
	// GraySwebDivider							= #e9e7f1								// GrayScalewebDivider
	// GraySwebBackground						= #f3f2fa								// GrayScalewebBackground
	// GraySwebSecondaryText					= #77708a								// GrayScalewebSecondaryText
	// GraySwebStroke							= #d3ceeb								// GrayScalewebStroke
	// GraySwebErrors							= #e00000								// GrayScalewebErrors
	// GraySwebService							= #2d7aed								// GrayScalewebService

/// ─── Interactive ───
	// IntAcPrimary3							= hsla(355, 85%, 46%, 0.03)		    	// InteractivePrimary3
	// IntAcPrimary5							= hsla(355, 85%, 46%, 0.05)		    	// InteractivePrimary5
	// IntAcPrimary10							= hsla(355, 85%, 46%, 0.10)		    	// InteractivePrimary10
	// IntAcPrimary20							= hsla(355, 85%, 46%, 0.20)		    	// InteractivePrimary20
	// IntAcPrimary30							= hsla(355, 85%, 46%, 0.30)		    	// InteractivePrimary30
	// IntAcPrimary40							= hsla(355, 85%, 46%, 0.40)		    	// InteractivePrimary40
	// IntAcPrimary50							= hsla(355, 85%, 46%, 0.50)		    	// InteractivePrimary50
	// IntAcPrimary60							= hsla(355, 85%, 46%, 0.60)		    	// InteractivePrimary60
	// IntAcPrimary70							= hsla(355, 85%, 46%, 0.70)		    	// InteractivePrimary70
	// IntAcPrimary80							= hsla(355, 85%, 46%, 0.80)		    	// InteractivePrimary80
	// IntAcPrimary90							= hsla(355, 85%, 46%, 0.90)		    	// InteractivePrimary90
	// IntAcPrimary								= hsla(355, 85%, 46%, 1.0)				// InteractivePrimary
	// IntAcPrimaryDark10						= hsla(355, 85%, 41%, 1.0)				// InteractivePrimaryDark10
	// IntAcPrimaryDark20						= hsla(355, 85%, 36%, 1.0)				// InteractivePrimaryDark20
	// IntAcPrimaryDark30						= hsla(355, 85%, 31%, 1.0)				// InteractivePrimaryDark30
	// IntAcPrimaryDark40						= hsla(355, 85%, 26%, 1.0)				// InteractivePrimaryDark40
	// IntAcPrimaryDark50						= hsla(355, 85%, 21%, 1.0)				// InteractivePrimaryDark50
	// IntAcSecondary3							= hsla(0, 0%, 13%, 0.03)				// InteractiveSecondary3
	// IntAcSecondary5							= hsla(0, 0%, 13%, 0.05)				// InteractiveSecondary5
	// IntAcSecondary10							= hsla(0, 0%, 13%, 0.10)				// InteractiveSecondary10
	// IntAcSecondary20							= hsla(0, 0%, 13%, 0.20)				// InteractiveSecondary20
	// IntAcSecondary30							= hsla(0, 0%, 13%, 0.30)				// InteractiveSecondary30
	// IntAcSecondary40							= hsla(0, 0%, 13%, 0.40)				// InteractiveSecondary40
	// IntAcSecondary50							= hsla(0, 0%, 13%, 0.50)				// InteractiveSecondary50
	// IntAcSecondary60							= hsla(0, 0%, 13%, 0.60)				// InteractiveSecondary60
	// IntAcSecondary70							= hsla(0, 0%, 13%, 0.70)				// InteractiveSecondary70
	// IntAcSecondary80							= hsla(0, 0%, 13%, 0.80)				// InteractiveSecondary80
	// IntAcSecondary90							= hsla(0, 0%, 13%, 0.90)				// InteractiveSecondary90
	// IntAcSecondary							= hsla(0, 0%, 13%, 1.0)			    	// InteractiveSecondary
	// IntAcSecondaryDark10						= hsla(0, 0%, 10%, 1.0)			    	// InteractiveSecondaryDark10
	// IntAcSecondaryDark20						= hsla(0, 0%, 7%, 1.0)					// InteractiveSecondaryDark20
	// IntAcSecondaryDark30						= hsla(0, 0%, 4%, 1.0)					// InteractiveSecondaryDark30
	// IntAcSecondaryDark40						= hsla(0, 0%, 1%, 1.0)					// InteractiveSecondaryDark40
	// IntAcSecondaryDark50						= hsla(0, 0%, 0%, 1.0)					// InteractiveSecondaryDark50
	// IntAcTertiary3							= hsla(202, 76%, 19%, 0.03)		    	// InteractiveTertiary3
	// IntAcTertiary5							= hsla(202, 76%, 19%, 0.05)		    	// InteractiveTertiary5
	// IntAcTertiary10							= hsla(202, 76%, 19%, 0.10)		    	// InteractiveTertiary10
	// IntAcTertiary20							= hsla(202, 76%, 19%, 0.20)		    	// InteractiveTertiary20
	// IntAcTertiary30							= hsla(202, 76%, 19%, 0.30)		    	// InteractiveTertiary30
	// IntAcTertiary40							= hsla(202, 76%, 19%, 0.40)		    	// InteractiveTertiary40
	// IntAcTertiary50							= hsla(202, 76%, 19%, 0.50)		    	// InteractiveTertiary50
	// IntAcTertiary60							= hsla(202, 76%, 19%, 0.60)		    	// InteractiveTertiary60
	// IntAcTertiary70							= hsla(202, 76%, 19%, 0.70)		    	// InteractiveTertiary70
	// IntAcTertiary80							= hsla(202, 76%, 19%, 0.80)		    	// InteractiveTertiary80
	// IntAcTertiary90							= hsla(202, 76%, 19%, 0.90)		    	// InteractiveTertiary90
	// IntAcTertiary							= hsla(202, 76%, 19%, 1.0)				// InteractiveTertiary
	// IntAcTertiaryDark10						= hsla(202, 76%, 14%, 1.0)				// InteractiveTertiaryDark10
	// IntAcTertiaryDark20						= hsla(202, 76%, 9%, 1.0)				// InteractiveTertiaryDark20
	// IntAcTertiaryDark30						= hsla(202, 76%, 4%, 1.0)				// InteractiveTertiaryDark30
	// IntAcTertiaryDark40						= hsla(202, 76%, 0%, 1.0)				// InteractiveTertiaryDark40

/// ─── Visa ───
	// VisPrimary								= #1434CB								// VisaBrandPrimary			/// ► ◄ ▲ ▼
	// VisPrimaryLight							= #3B57DE								// VisaBrandPrimaryLight	/// ↑ ↓ → ←
	// VisPrimaryDark							= #021E4C								// VisaBrandPrimaryDark
	// VisSecondary								= #FCC015								// VisaBrandSecondary		/// VT|1↓→6|1→5|!|_7_(.)|	/// coint|1↓→6|1→4|_7_.|		/// ok|1↓→6|1→4|.|_1_|			/// |1↓→6|1→4|!|_7_|		/// |1→6|1→↓6|_1_|  #910
	// VisSecondaryLight						= #FFD700								// VisaBrandSecondaryLight	/// |1↓#→6|1↓→6|_789_|-!|	/// |1↓→6|1→4|-|_74_|
	// VisSecondaryDark							= #F7B600								// VisaBrandSecondaryDark	/// @|1↓→6|1→4|!|_789_|
	// VisTertiary7								= #2C2C2C								// VisaBrandTertiary7		/// @|1↓→6|1→6|.!|_4_(.)|
	// VisTertiary6								= #5C5C5C								// VisaBrandTertiary6		/// @|1↓→9|1→6|.|_7_|		/// ()@|1↓→9|1→6|!|_7_|		/// bix|1↓→6|1→3|.-|_1_|
	// VisTertiary5								= #979797								// VisaBrandTertiary5		/// @|1↓→9|1→5|.!|_7_|
	// VisTertiary4								= #B9B9B9								// VisaBrandTertiary4		/// @|1↓→6|1→5|-|_714_|		/// bix|1↓→3|1→5|.-|_789_|
	// VisTertiary3								= #DEDEDE								// VisaBrandTertiary3		/// @|1→↓6|1→5|_741_|
	// VisTertiary2								= #EEEEEE								// VisaBrandTertiary2									/// ap|1→↓6|1→5|!|_7_|
	// VisTertiary1								= #F7F7F7								// VisaBrandTertiary1		/// @|1→↑12|.-|_741_|		/// gt|1→↑10|.-|_6_|

/// ─── Latam ───
	// LatRedBackground							= rgb(232, 17, 75)						// Latam Red Background

/// ─── Arbe Robotics ───
	// ARoPrimary								= #0035FF								// ArbePrimary
	// ARoPrimaryLight							= #0640FF								// ArbePrimaryLight
	// ARoSecondary		    					= #04ebff								// ArbeSecondary

/// ─── AutoX ───
	// AxPrimary								= #2253F0								// AutoXPrimary
	// AxPrimaryLight							= #0050F9								// AutoXPrimaryLight
	// AxSecondary								= #75ebc0								// AutoXSecondary

/// ─── EEG ───
	// EEGSkyBlue30								= #01EBF9								// EEGSkyBlue30
	// EEGSkyBlue40								= #00E7FD								// EEGSkyBlue40
	// EEGFucsia40								= #FF00B1								// EEGFucsia40
	// EEGFucsia50								= #FE0CB6								// EEGFucsia50

/// ─── Bright Line ───
BrLiYel10								= #FBFD73								// BrightLine Yellow Light
	// BrLiYel20								= #FFFD52								// BrightLine Yellow Light
	// BrLiYel30								= #FDF43C								// BrightLineB Yellow High
BrLiYel40								= #FEF301								// BrightLineBackground Yellow Nit
	// BrLiYel50								= #FFDB00								// BrightLineBackground Yellow Base

/// ─── Waves Beh ───
	// WavBehPink20								= #FFB7FF								// WavBehPink20
	// WavBehFucsia50							= #DF36DF								// WavBehFucsia50
	// WavBehNude10								= #FFFDDF								// WavBehNude10
	// WavBehSky70								= #06B7FE								// WavBehSky70
	// WavBehAqua50								= #0CF2F2								// WavBehAqua50

/// ─── Victoria Secret ───
	// VictSecPink20							= #EDB3DD								// VictSecPink20
	// VictSecPink50							= #E651CD								// VictSecPink50
VictSecFucsia50							= #EA1889								// VictSecFucsia50
	// VictSecWine30							= #C2329F								// VictSecWine30
	// VictSecWine50							= #7D1250								// VictSecWine50
	// VictSecWine60							= #7C2558								// VictSecWine60

/// ─── Mongo DB ───
	// MongoSky10								= #E3FCF7								// MongoDBSky10
	// MongoYellow50							= #FFE212								// MongoDBYellow50
	// MongoLime50								= #B1FF05								// MongoDBLime50
	// MongoGreen50								= #00ED64								// MongoDBGreen50
	// MongoGreen60								= #13AA52								// MongoDBGreen60
	// MongoGreen70								= #00684A								// MongoDBGreen70
	// MongoGreen80								= #014E3D								// MongoDBGreen80
	// MongoGray50								= #42494F								// MongoDBGray50
	// MongoGray70								= #001E2B								// MongoDBGray70
	// MongoBlack50								= #231F20								// MongoDBBlack50

/// ─── Platzi ───
PlatziGreen30							= #ADEB42								// PlatziGreen60
	// PlatziGreen40							= #85C638								// PlatziGreen60
	// PlatziGreen50							= #95CA3E								// PlatziGreen50
	// PlatziGreen60							= #98CA3F								// PlatziGreen40
PlatziBlue50							= #24385B								// PlatziBlue50
PlatziBlue70							= #121F3D								// PlatziBlue70
	// PlatziBlue80								= #0C1633								// PlatziBlue80

/// ─── Ultr ───
	// UltrBlueSky10							= #59F2E9								// UltrBlueSky10
	// UltrBlueSky20							= #39F0EA								// UltrBlueSky20
	// UltrMenta10								= #E0F9EF								// UltrMenta10
	// UltrMenta20								= #80F3EC								// UtlrMenta20
	// UltrMenta30								= #7FFFD4								// UltrMenta30
	// UltrMenta40								= #73FFCA								// UltrMenta40
	// UltrMenta50								= #9CFFD7								// UtlrMenta50
	// UltrMenta60								= #4fffc0								// UtlrMenta60
	// UltrGreen50								= #95BD5F								// UltrGreen50
	// UltrRose40								= #FFA3E3								// UltrRose
	// UltrFucsia30								= #ff6fd3								// UltrFucsia
	// UltrLyla									= #7E57C2								// UltrLyla
	// UltrLightGray							= #787B86								// UltrLightGray
	// UltrRedNit								= #de0011								// UltrRedNit
	// UltrRed									= #db004b								// UltrRed
	// UltrBlue									= #003bde								// UltrBlue
	// UltrYellow								= #f4de1a								// UltrYellow
	// UltrSkyBlue								= #12cef8								// UltrSkyBlue
	// UltrOrange								= #ff5a00								// UltrOrange

/// ─── Allen ───
AllenSky10								= #CCF8FF								// AllenSky10
	// AllenSky20								= #80F3EC								// AllenSky20
	// AllenSky50								= #01ebf9								// AllenSky50

	// AllenMint10								= #E0F9EF								// AllenMint10
	// AllenMint20								= #9CFFD7								// AllenMint20
	// AllenMint30								= #7FFFD4								// AllenMint30
	// AllenMint40								= #73FFCA								// AllenMint40
	// AllenMint50								= #4fffc0								// AllenMint50
AllenMint60								= #33FFAC								// AllenMint60

	// AllenFucsia30							= #E06BAA								// AllenFucsia30
	// AllenFucsia50							= #EA1889
	// AllenWine50								= #E91E63								// AllenWine50
	// AllenWine60								= #E8114B								// AllenWine60


//// ─────────────────────────────────────────────────────────────────────

adapMonToolAdj				= "Ajusta el MFI en su lugar para que los niveles de Sobrecompra, Sobreventa y Neutral permanezcan fijos"
adapMonToolMlt				= "Aumente esto para que los números de clasificación aparezcan más lejos del gráfico del oscilador"

adapMonGrpSet				= "Configuracion FMI"
adapMonGrpLim				= "Clustering Setting"
adapMonGrpApar				= "Apariencia"

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Vars ─────────
//// ───────────────────────

adapMonVarSRC				= input.source	(defval = hlc3,	title = "Fuente MFI",							group = adapMonGrpSet)
adapMonVarLENGTH			= input.int		(defval = 14,	title = "Longitud MFI",							minval = 1,	group = adapMonGrpSet)
adapMonVarDataLength		= input.int		(defval = 300,	title = "Tamaño de datos de entrenamiento",		minval = 1,	group = adapMonGrpLim)
adapMonVarIterations		= input.int		(defval = 5,	title = "Cantidad de iteraciones por barra",	minval = 1,	group = adapMonGrpLim)
adapMonVarOverbought		= input.float	(defval = 80.0,	title = "Inicio de Sobre Compra",				group = adapMonGrpLim)
adapMonVarNeutral			= input.float	(defval = 50.0,	title = "Neutral",								group = adapMonGrpLim)
adapMonVarOversold			= input.float	(defval = 20.0,	title = "Inicio de Sobre Venta",				group = adapMonGrpLim)

adapMonVarADJ				= input.bool	(defval = true,	title = "Usar MFI ajustado",					group = adapMonGrpApar,	tooltip = adapMonToolAdj)
adapMonVarMLT				= input.float	(defval = 1.0,	title = "Multiplicador",						group = adapMonGrpApar,	tooltip = adapMonToolMlt)
adapMonColorLong			= input.color	(AllenMint60,	title = "Compra",								group = adapMonGrpApar) //#00FFBB
adapMonColorShort			= input.color	(AllenSky10,	title = "Venta",								group = adapMonGrpApar) //#FF1100

adapMonVaExAA				= adapMonVarOverbought
adapMonVaExBB				= adapMonVarNeutral
adapMonVaExCC				= adapMonVarOversold

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Functions ────
//// ───────────────────────

adapMonVarOSC				= ta.mfi(adapMonVarSRC, adapMonVarLENGTH)

var adapMonArrOB			= array.new_float(1, adapMonVarOverbought)
var adapMonArrNE			= array.new_float(1, adapMonVarNeutral)
var adapMonArrOS			= array.new_float(1, adapMonVarOversold)

if nz(adapMonVarOSC) > 0
	for j = adapMonVarIterations to 1

		adapMonArrOB.clear()
		adapMonArrNE.clear()
		adapMonArrOS.clear()

		for i = adapMonVarDataLength to 0

			if math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExBB) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrNE.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExBB) and math.abs(adapMonVarOSC[i] - adapMonVaExAA) < math.abs(adapMonVarOSC[i] - adapMonVaExCC)
				adapMonArrOB.push(adapMonVarOSC[i])

			if math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExAA) and math.abs(adapMonVarOSC[i] - adapMonVaExCC) < math.abs(adapMonVarOSC[i] - adapMonVaExBB)
				adapMonArrOS.push(adapMonVarOSC[i])
		
		adapMonVaExAA		:= array.avg(adapMonArrOB)
		adapMonVaExBB		:= array.avg(adapMonArrNE)
		adapMonVaExCC		:= array.avg(adapMonArrOS)

adapMonArrNE_NEW			= array.avg(adapMonArrNE)
adapMonArrOB_NEW			= array.avg(adapMonArrOB)
adapMonArrOS_NEW			= array.avg(adapMonArrOS)

positionBetweenBands		= 100 * ((adapMonVarOSC - adapMonArrOS_NEW)/(adapMonArrOB_NEW - adapMonArrOS_NEW))

adapMonIfVAL				= adapMonVarADJ ? positionBetweenBands : adapMonVarOSC

adapMonFuncST				= ta.stdev(adapMonIfVAL, adapMonVarLENGTH)

adapMonIfCOLOR100			= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 90) : color.new(adapMonColorShort, 90)
adapMonIfCOLOR0				= adapMonVarOSC > adapMonArrNE_NEW ? color.new(adapMonColorLong, 0) : color.new(adapMonColorShort, 0)

//// ───────────────────────
/// ─── Adaptive Money
/// ─── Display ──────
//// ───────────────────────

adapMonPlotMAIN		= plot	(adapMonIfVAL,						color = adapMonIfCOLOR100)
adapMonPlotMID		= plot	(adapMonVarADJ ? adapMonVarNeutral : adapMonArrNE_NEW,		color = adapMonIfCOLOR100)

plot				(adapMonVarADJ ? 100 : adapMonArrOB_NEW,	color =  color.from_gradient(adapMonVarOSC, adapMonArrNE_NEW, adapMonVarADJ ? 100 : adapMonArrOB_NEW, color.new(color.gray, 70), color.new(adapMonColorShort, 0)), linewidth = 6)
plot				(adapMonVarADJ ? 0 : adapMonArrOS_NEW,		color = color.from_gradient(adapMonVarOSC, adapMonVarADJ ? 0 : adapMonArrOS_NEW, adapMonArrNE_NEW, color.new(adapMonColorLong, 0), color.new(color.gray, 70)), linewidth = 6)

// plotchar			(math.abs(adapMonVarOSC - adapMonArrNE_NEW) < math.abs(adapMonVarOSC - adapMonArrOB_NEW) and math.abs(adapMonVarOSC - adapMonArrNE_NEW) < math.abs(adapMonVarOSC - adapMonArrOS_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Lateral", "══", location.absolute, adapMonIfCOLOR0)
// plotchar			(math.abs(adapMonVarOSC - adapMonArrOB_NEW) < math.abs(adapMonVarOSC - adapMonArrNE_NEW) and math.abs(adapMonVarOSC - adapMonArrOB_NEW) < math.abs(adapMonVarOSC - adapMonArrOS_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Tendencia Alcista", "──", location.absolute, adapMonIfCOLOR0)
// plotchar			(math.abs(adapMonVarOSC - adapMonArrOS_NEW) < math.abs(adapMonVarOSC - adapMonArrOB_NEW) and math.abs(adapMonVarOSC - adapMonArrOS_NEW) < math.abs(adapMonVarOSC - adapMonArrNE_NEW) ? adapMonIfVAL + (adapMonVarOSC > adapMonArrNE_NEW ? adapMonFuncST*adapMonVarMLT : -adapMonFuncST*adapMonVarMLT) : na, "Tendencia Bajista", "──", location.absolute, adapMonIfCOLOR0)

plotchar			(ta.crossunder(adapMonVarOSC, adapMonArrOB_NEW) ? (adapMonVarADJ ? 100 : adapMonArrOB_NEW) + 10 : na,	"Corrección Venta",		"▼",	location.absolute, adapMonColorShort, size = size.tiny)
plotchar			(ta.crossover(adapMonVarOSC, adapMonArrOS_NEW) ? (adapMonVarADJ ? 0 : adapMonArrOS_NEW) - 10 : na,		"Corrección Compra",	"▲",	location.absolute, adapMonColorLong, size = size.tiny)

fill				(adapMonPlotMID, adapMonPlotMAIN, color = adapMonIfCOLOR100, title = "Area de Tendencia")
fill				(adapMonPlotMID, adapMonPlotMAIN, adapMonIfVAL, adapMonVarADJ ? 50 : adapMonArrNE_NEW, color.new(chart.bg_color, 1000), adapMonVarOSC > adapMonArrNE_NEW ? adapMonColorLong : adapMonColorShort)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════════╗
/// ║  Tsi & Divergences				║
/// ║  @	Allen.						║
/// ╚═══════════════════════════════════╝
/// ─── Colors ───

/// ─── Colors ───

//// ───────────────────────
/// ─── Vars ───
//// ───────────────────────

/// ─── Colors ───
tsiDivColorBaseBull			= PlatziGreen30
tsiDivColorBaseBear			= VictSecFucsia50

tsiDivColorBull				= color.new(AllenMint60,		0)
tsiDivColorBear				= color.new(AllenSky10,			0)
tsiDivColorDiverBull		= color.new(PlatziGreen30,		0)
tsiDivColorDiverBear		= color.new(VictSecFucsia50,	0)
tsiDivColorHiddenBull		= color.new(AllenMint60,		55)
tsiDivColorHiddenBear		= color.new(AllenSky10,			55)
tsiDivColorText				= color.new(PlatziBlue70,		0)
tsiDivColorNone				= color.new(AllenSky10,			100)
tsiDivColorTSI				= color.new(AllenSky10,			20)

/// ─── Inputs ───
tsiDivInputLong				= input(defval = 6,		title = 'Longitud de Compra')
tsiDivInputShort			= input(defval = 13,	title = 'Longitud de Venta')
tsiDivInputSignal			= input(defval = 4,		title = 'Longitud de la SEÑAL')

price						= close[0]

/// ─── divergences ───
tsiDivDiverLBR				= input(defval = 5,		title = 'Corrección a la derecha')
tsiDivDiverLBL				= input(defval = 5,		title = 'Corrección a la izquierda')
tsiDivDiverRangeUpper		= input(defval = 30,	title = 'Rango de corrección maximo')
tsiDivDiverRangeLower		= input(defval = 2,		title = 'Rango de corrección minimo')

/// ─── Show ───
tsiDivShowPlotBull			= input(defval = true,	title = 'Mostrar Divergencia Alcista')
tsiDivShowPlotHiddenBull	= input(defval = true,	title = 'Mostrar Divergencia scalp Alcista')
tsiDivShowPlotBear			= input(defval = true,	title = 'Mostrar Divergencia Bajista')
tsiDivShowPlotHiddenBear	= input(defval = true,	title = 'Mostrar Divergencia scalp Bajista')
tsiDivShowCloudOn			= input(defval = true,	title = 'TSI Cloud')
tsiDivShowTSI				= input(defval = false,	title = 'TSI')

//// ───────────────────────
/// ─── Functions ───
//// ───────────────────────

double_smooth(src, tsiDivInputLong, tsiDivInputShort) =>
	fist_smooth = ta.ema(src, tsiDivInputLong)
	ta.ema(fist_smooth, tsiDivInputShort)

tsiDiFuPC							= ta.change(price)
tsiDiFuDouble_smoothed_price		= double_smooth(tsiDiFuPC, tsiDivInputLong, tsiDivInputShort)
tsiDiFuDouble_smoothed_abs_price	= double_smooth(math.abs(tsiDiFuPC), tsiDivInputLong, tsiDivInputShort)
tsiDiFuTsi_value					= 125 * (tsiDiFuDouble_smoothed_price / tsiDiFuDouble_smoothed_abs_price) + 50
// tsiDiFuTsi_value					= tsiDiFuDouble_smoothed_price / tsiDiFuDouble_smoothed_abs_price * 65 + 50
tsiDiFuLagLine						= ta.ema(tsiDiFuTsi_value, tsiDivInputSignal)

/// ─── Plot data ───
tsiDiFuFillColor					= tsiDivShowCloudOn and tsiDiFuTsi_value > tsiDiFuLagLine ? tsiDivColorDiverBull : tsiDivShowCloudOn and tsiDiFuTsi_value <= tsiDiFuLagLine ? tsiDivColorDiverBear : na

plot(tsiDiFuTsi_value,				color = color.new(PlatziBlue70, 60),	linewidth = 6)
plot(ta.ema(tsiDiFuTsi_value,		tsiDivInputSignal),	color = color.new(PlatziBlue70, 60),	linewidth = 6)

tsiDiFuLine1						= plot(tsiDiFuTsi_value,	color = color.new(tsiDiFuFillColor, 30),	linewidth = 2)
tsiDiFuLine2						= plot(ta.ema(tsiDiFuTsi_value,	tsiDivInputSignal),	color = color.new(tsiDiFuFillColor, 30),	linewidth = 2)
hline(0,	title = 'Zero',	color = color.new(#000000, 50),	editable = true)

/// ─── Colour fill ───
tsiDiFuCloudColor					= tsiDivShowCloudOn and tsiDiFuTsi_value > tsiDiFuLagLine ? tsiDivColorBaseBull : tsiDivShowCloudOn and tsiDiFuTsi_value <= tsiDiFuLagLine ? tsiDivColorBaseBear : na

fill(tsiDiFuLine1,	tsiDiFuLine2,	color = color.new(tsiDiFuCloudColor, 70))

tsiDiFuTSI							= tsiDiFuTsi_value
tsiDiFuOSC							= tsiDiFuTSI

tsiDivDiTSIPlot						= plot(tsiDivShowTSI ? tsiDiFuOSC : na, linewidth = 2, color = tsiDivColorTSI, title = 'TSI')

tsiDiFuPLFound						= na(ta.pivotlow(tsiDiFuOSC, tsiDivDiverLBL, tsiDivDiverLBR)) ? false : true
tsiDiFuPHFound						= na(ta.pivothigh(tsiDiFuOSC, tsiDivDiverLBL, tsiDivDiverLBR)) ? false : true

_inRange(cond) =>
	tsiDiFuBars						= ta.barssince(cond == true)
	tsiDivDiverRangeLower			<= tsiDiFuBars and tsiDiFuBars <= tsiDivDiverRangeUpper

//// ───────────────────────
/// ─── SHOW DIVERGENCES ───
//// ───────────────────────

//// ───────────────────────
/// ─── Regular Bullish ───
//// ───────────────────────

/// ─── Osc: Higher Low ───
tsiDiInsOSCHL						= tsiDiFuOSC[tsiDivDiverLBR] > ta.valuewhen(tsiDiFuPLFound, tsiDiFuOSC[tsiDivDiverLBR], 1) and _inRange(tsiDiFuPLFound[1])

/// ─── Price: Lower Low ───
tsiDiInsPRICELL						= low[tsiDivDiverLBR] < ta.valuewhen(tsiDiFuPLFound, low[tsiDivDiverLBR], 1)

tsiDiInsBULLCond					= tsiDivShowPlotBull and tsiDiInsPRICELL and tsiDiInsOSCHL and tsiDiFuPLFound

plot(tsiDiFuPLFound ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Confirmacion de Compra', linewidth = 2, color = tsiDiInsBULLCond ? tsiDivColorBull : tsiDivColorNone)

plotshape(tsiDiInsBULLCond ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Etiqueta de Compra', text = ' Compra ', style = shape.labelup, location = location.absolute, color = tsiDivColorBull, textcolor = tsiDivColorText)

//// ───────────────────────
/// ─── Hidden Bullish ───
//// ───────────────────────

/// ─── Osc: Lower Low ───
tsiDiInsOSCLL						= tsiDiFuOSC[tsiDivDiverLBR] < ta.valuewhen(tsiDiFuPLFound, tsiDiFuOSC[tsiDivDiverLBR], 1) and _inRange(tsiDiFuPLFound[1])

/// ─── Price: Higher Low ───
tsiDiInsPRICEHL = low[tsiDivDiverLBR] > ta.valuewhen(tsiDiFuPLFound, low[tsiDivDiverLBR], 1)

tsiDiInsHiddenBullCond				= tsiDivShowPlotHiddenBull and tsiDiInsPRICEHL and tsiDiInsOSCLL and tsiDiFuPLFound

plot(tsiDiFuPLFound ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Confirmación de Compra scalp', linewidth = 2, color = tsiDiInsHiddenBullCond ? tsiDivColorHiddenBull : tsiDivColorNone)

plotshape(tsiDiInsHiddenBullCond ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Etiqueta de Compra scalp', text = ' △ scalp ', style = shape.labelup, location = location.absolute, color=tsiDivColorHiddenBull, textcolor = tsiDivColorText)

//// ───────────────────────
/// ─── Regular Bearish ───
//// ───────────────────────

/// ─── Osc: Lower High ───
tsiDiInsOSCLH						= tsiDiFuOSC[tsiDivDiverLBR] < ta.valuewhen(tsiDiFuPHFound, tsiDiFuOSC[tsiDivDiverLBR], 1) and _inRange(tsiDiFuPHFound[1])

/// ─── Price: Higher High ───
tsiDiInsPRICEHH						= high[tsiDivDiverLBR] > ta.valuewhen(tsiDiFuPHFound, high[tsiDivDiverLBR], 1)

tsiDiInsBEARCond					= tsiDivShowPlotBear and tsiDiInsPRICEHH and tsiDiInsOSCLH and tsiDiFuPHFound

plot(tsiDiFuPHFound ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Confirmación de Venta', linewidth = 2, color = tsiDiInsBEARCond ? tsiDivColorBear : tsiDivColorNone)

plotshape(tsiDiInsBEARCond ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Etiqueta de Venta', text = ' Venta ', style = shape.labeldown, location = location.absolute, color = tsiDivColorBear, textcolor = tsiDivColorText)

//// ───────────────────────
/// ─── Hidden Bearish ───
//// ───────────────────────

/// ─── Osc: Higher High ───
tsiDiInsOSCHH						= tsiDiFuOSC[tsiDivDiverLBR] > ta.valuewhen(tsiDiFuPHFound, tsiDiFuOSC[tsiDivDiverLBR], 1) and _inRange(tsiDiFuPHFound[1])

/// ─── Price: Lower High ───
tsiDiInsPRICELH						= high[tsiDivDiverLBR] < ta.valuewhen(tsiDiFuPHFound, high[tsiDivDiverLBR], 1)

tsiDiInsHiddenBearCond				= tsiDivShowPlotHiddenBear and tsiDiInsPRICELH and tsiDiInsOSCHH and tsiDiFuPHFound

plot(tsiDiFuPHFound ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Confirmación de Venta scalp', linewidth = 2, color = tsiDiInsHiddenBearCond ? tsiDivColorHiddenBear : tsiDivColorNone)

plotshape(tsiDiInsHiddenBearCond ? tsiDiFuOSC[tsiDivDiverLBR] : na, offset = -tsiDivDiverLBR, title = 'Etiqueta de Venta scalp', text = ' ▽ scalp ', style = shape.labeldown, location = location.absolute, color = tsiDivColorHiddenBear, textcolor = tsiDivColorText)

//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────
//// ─────────────────────────────────────────────────────────────────────

/// ╔═══════════════════════════════╗
/// ║	Hullinger Percentile Osc	║
/// ║	@	Allen.					║
/// ╚═══════════════════════════════╝

//// ─────────────────────────────────────────────────────────────────────

//// ───────────────────────
/// ─── Hullinger ───
/// ─── Variables ───
//// ───────────────────────

hullPercToolMod			= "El modo de visualización, el modo Swing se utiliza para atrapar tendencias de swing y el modo Contrarian es para atrapar reversiones"
hullPercToolLbL			= "Cuanto mayor sea este número, menos sensible será la detección de la divergencia. Un número menor detectará divergencias más pequeñas y/o a corto plazo"
hullPercToolLbR			= "Este número es la cantidad de barras que el indicador esperará la confirmación para trazar las divergencias. Cuanto mayor sea el número, mayor será el retraso de la señal, pero menor será el número de señales falsas. Establézcalo en 0 si no desea ningún retraso en absoluto"

hullPercGroupApar		= "Apariencia"
hullPercGroupSett		= "Configuración Hullinger"
hullPercGroupOsc		= "Oscilador Hullinger"

hullPercColorLong		= input.color(AllenMint60,				title = "Compra",															group = hullPercGroupApar,	inline = "Colors")
hullPercColorShort		= input.color(AllenSky10,				title = "Venta",															group = hullPercGroupApar,	inline = "Colors")
hullPercColorContrar	= input.color(BrLiYel10,				title = "Contrarian",														group = hullPercGroupApar,	inline = "Colors")
huPeColorLine			= input		(BrLiYel40)

huPeColorUp				= color.new(BrLiYel40,			70)
huPeColorDn				= color.new(BrLiYel40,			70)
huPeColorHiddenUp		= color.new(hullPercColorLong,	80)
huPeColorHiddenDn		= color.new(hullPercColorShort,	80)
huPeColorText			= color.new(PlatziBlue70,		0)
huPeColorNONE			= color.new(AmeTrGrayNickel,	100)

hullPercVarsLength		= input.int		(defval = 40,			title = "Longitud Principal",			minval = 1,							group = hullPercGroupSett)
hullPercVarsSRC			= input			(defval = hlc3,			title = "Fuente",															group = hullPercGroupSett)
hullPercVarsMULT		= input.float	(defval = 2.0,			title = "X StdDev",						minval = 0.001,	maxval = 50,		group = hullPercGroupSett,	tooltip = "Multiplicador para el ancho de las bandas internas")
hullPercVarsMULTExt		= input.float	(defval = 1.5,			title = "X Bandas extendidas",			minval=0.001,	maxval=50,			group = hullPercGroupSett,	tooltip = "Multiplicador para el ancho de las bandas externas")
hullPercVarsMOD			= input.string	(defval = "Contrarian",	title = "Modo de oscilador",			options = ["Swing", "Contrarian"],	group = hullPercGroupOsc,	tooltip = hullPercToolMod)
hullPercVarsLAG			= input.int		(defval = 2,			title = "Retraso de oscilaciones",		minval = 1,							group = hullPercGroupOsc)

hullPercVarslbL			= input			(defval = 20,			title = "Longitud de detección de pivote de divergencia",					group = hullPercGroupOsc,	tooltip = hullPercToolLbL,		display = display.data_window)
hullPercVarslbR			= input			(defval = 1,			title = "Longitud de confirmación de pivote de divergencia",				group = hullPercGroupOsc,	tooltip = hullPercToolLbR,		display = display.data_window)

hullPercShowLongPlot	= input			(defval = true,			title = "Mostrar divergencias alcistas",									group = hullPercGroupApar)
hullPercShowShortPlot	= input			(defval = true,			title = "Mostrar Trazar divergencias bajista",								group = hullPercGroupApar)

//// ───────────────────────
/// ─── Hullinger ───
/// ─── Functions ───
//// ───────────────────────

/// ─── Modified Stdev
HullPercFunctionIsZero(val, eps) => math.abs(val) <= eps

HullPercFunctionSUM(fst, snd) =>
	huPeFuEPS			= 1e-10
	huPeFuRES			= fst + snd
	if HullPercFunctionIsZero(huPeFuRES, huPeFuEPS)
		huPeFuRES := 0
	else
		if not HullPercFunctionIsZero(huPeFuRES, 1e-4)
			huPeFuRES := huPeFuRES
		else
			15

HullPercFunctionSUMPine_STDEV(hullPercVarsSRC, hullPercVarsLength) =>
	huPeFuAVG			= ta.hma(hullPercVarsSRC, hullPercVarsLength)
	sumOfSquareDeviations = 0.0
	for i = 0 to hullPercVarsLength - 1
		huPeFuSum = HullPercFunctionSUM(hullPercVarsSRC[i], -huPeFuAVG)
		sumOfSquareDeviations := sumOfSquareDeviations + huPeFuSum * huPeFuSum

	stdev	= math.sqrt(sumOfSquareDeviations / hullPercVarsLength)

huPeFuBasis				= ta.sma(hullPercVarsSRC, hullPercVarsLength)
huPeFuDEV				= hullPercVarsMULT * HullPercFunctionSUMPine_STDEV(hullPercVarsSRC, hullPercVarsLength)
huPeFuUpper				= huPeFuBasis + huPeFuDEV
huPeFuLower				= huPeFuBasis - huPeFuDEV
huPeFuUpperO			= huPeFuBasis + huPeFuDEV * hullPercVarsMULTExt
huPeFuLowerO			= huPeFuBasis - huPeFuDEV * hullPercVarsMULTExt

huPeFuUpperOuter		= 100 * (huPeFuUpperO - huPeFuLower)/(huPeFuUpper - huPeFuLower)
huPeFunPosBetweenBands	= 75 * (hullPercVarsSRC - huPeFuLower)/(huPeFuUpper - huPeFuLower) + 20
huPeFuLowerOuter		= 100 * (huPeFuLowerO - huPeFuLower)/(huPeFuUpper - huPeFuLower)

huPeFuSmoothed			= ta.hma(ta.linreg(huPeFunPosBetweenBands, 7, 0),33)

HullPercFunctionOSCIL(type) =>
	switch type
		"Swing"			=> huPeFuSmoothed
		"Contrarian"	=> huPeFunPosBetweenBands


huPeFuUpperWithins		= array.new_float()
huPeFuLowerWithins		= array.new_float()

for i = 1 to 3
	v = (huPeFuUpperOuter-100)/4 * i + 100
	huPeFuUpperWithins.unshift(v)
	v1 = -(0-huPeFuLowerOuter)/4 * i
	huPeFuLowerWithins.unshift(v1)

//// ───────────────────────
/// ─── Hullinger ───
/// ─── Visual ──────
//// ───────────────────────

huPeFuOscCOL								= hullPercVarsMOD == "Swing" ? (huPeFuSmoothed > huPeFuSmoothed[hullPercVarsLAG] ? hullPercColorLong : hullPercColorShort) : hullPercColorContrar
huPeFuOscOSC								= plot(HullPercFunctionOSCIL(hullPercVarsMOD),				color = color.new(huPeFuOscCOL, 30))
huPeFuOscLAG								= plot(HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarsLAG],			display =  display.none)

fill(huPeFuOscOSC, huPeFuOscLAG,			color.new(huPeFuOscCOL, 75),				"Relleno Oscilador")

plotchar(ta.cross(HullPercFunctionOSCIL(hullPercVarsMOD), HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarsLAG])		and hullPercVarsMOD == "Swing"		? HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarsLAG] : na,									"Oscilador Swing",				"●",	location.absolute,	huPeFuOscCOL,	size = size.tiny)
plotchar(ta.crossunder(HullPercFunctionOSCIL(hullPercVarsMOD), 100)							and hullPercVarsMOD == "Contrarian"	? math.max(HullPercFunctionOSCIL(hullPercVarsMOD)[1], huPeFuUpperOuter) + (huPeFuUpperOuter-huPeFuLowerOuter) * 0.2 : na,	"Corrección bajista suave",		"▽",	location.absolute,	hullPercColorShort,		size = size.tiny)
plotchar(ta.crossover(HullPercFunctionOSCIL(hullPercVarsMOD), 0)							and hullPercVarsMOD == "Contrarian"	? math.min(HullPercFunctionOSCIL(hullPercVarsMOD)[1], huPeFuLowerOuter) - (huPeFuUpperOuter-huPeFuLowerOuter) * 0.2 : na,	"Corrección alcista suave",		"△",	location.absolute,	hullPercColorLong,		size = size.tiny)

plotchar(ta.crossunder(HullPercFunctionOSCIL(hullPercVarsMOD), huPeFuUpperOuter)			and hullPercVarsMOD == "Contrarian"	? math.max(HullPercFunctionOSCIL(hullPercVarsMOD)[1], huPeFuUpperOuter) + (huPeFuUpperOuter-huPeFuLowerOuter) * 0.3 : na,	"Correción Bajista Fuerte",		"▼",	location.absolute,	hullPercColorShort,		size = size.tiny)
plotchar(ta.crossover(HullPercFunctionOSCIL(hullPercVarsMOD), huPeFuLowerOuter)				and hullPercVarsMOD == "Contrarian"	? math.min(HullPercFunctionOSCIL(hullPercVarsMOD)[1], huPeFuLowerOuter) - (huPeFuUpperOuter-huPeFuLowerOuter) * 0.3 : na,	"Correción Alcista Fuerte",		"▲",	location.absolute,	hullPercColorLong,		size = size.tiny)

huPeFuPLFound								= na(ta.pivotlow(HullPercFunctionOSCIL(hullPercVarsMOD), hullPercVarslbL, hullPercVarslbR)) ? false : true
huPeFuPHFound								= na(ta.pivothigh(HullPercFunctionOSCIL(hullPercVarsMOD), hullPercVarslbL, hullPercVarslbR)) ? false : true

HullPercFuntionInRange(cond) =>
	huPeVaBars = ta.barssince(cond == true)
	-80 <= huPeVaBars and huPeVaBars <= 80

/// ─── Regular Long	
huPeFuOscHL									= HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarslbR] > ta.valuewhen(huPeFuPLFound, HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarslbR], 1) and HullPercFuntionInRange(huPeFuPLFound[1])
huPeFuPriceLL								= low[hullPercVarslbR] < ta.valuewhen(huPeFuPLFound, low[hullPercVarslbR], 1)
huPeFuCondLong								= hullPercShowLongPlot and huPeFuPriceLL and huPeFuOscHL and huPeFuPLFound

plot(huPeFuPLFound							? HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarslbR] : na,		offset = -hullPercVarslbR,		title = "Compra",	linewidth = 2,		color = (huPeFuCondLong ? huPeColorUp : huPeColorNONE))
// plotshape(huPeFuPLFound						? huPeFunPosBetweenBands[hullPercVarslbR] : na,		offset = -hullPercVarslbR,		title = "Etiqueta de Compra",	text = ' Compra Hull',	style = shape.labelup,	location = location.absolute,	color = huPeColorUp,	textcolor = huPeColorText)

/// ─── Regular Short	
huPeFuOscLH									= HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarslbR] < ta.valuewhen(huPeFuPHFound, HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarslbR], 1) and HullPercFuntionInRange(huPeFuPHFound[1])
huPeFuPriceHH								= high[hullPercVarslbR] > ta.valuewhen(huPeFuPHFound, high[hullPercVarslbR], 1)
huPeFuCondShort								= hullPercShowShortPlot and huPeFuPriceHH and huPeFuOscLH and huPeFuPHFound

plot(huPeFuPHFound							? HullPercFunctionOSCIL(hullPercVarsMOD)[hullPercVarslbR] : na,		offset = -hullPercVarslbR,		title = "Venta",	linewidth = 2,		color = (huPeFuCondShort ? huPeColorDn : huPeColorNONE))
// plotshape(huPeFuPHFound						? huPeFunPosBetweenBands[hullPercVarslbR] : na,		offset = -hullPercVarslbR,		title = "Etiqueta de Venta",	text = ' Venta Hull',	style = shape.labeldown,	location = location.absolute,	color = huPeColorDn,	textcolor = huPeColorText)
//// ─────────────────────────────────────────────────────────────────────
